---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Ressources - Vidéos - Sonny Court">
  <div class="container">
    <div class="header">
      <div class="badge">Ressources gratuites • Mises à jour automatiquement</div>
      <h1>Transforme ton mindset.</h1>
      <p class="subtitle">Découvre les stratégies pour débloquer ton potentiel</p>
    </div>

    <div id="videosContainer"></div>
  </div>
</Layout>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Inter', Roboto, sans-serif;
    background: #0f1419;
    color: #e4e6ea;
    min-height: 100vh;
    padding: 40px 20px;
    line-height: 1.6;
  }

  .container {
    max-width: 1400px;
    margin: 0 auto;
  }

  .header {
    text-align: center;
    margin-bottom: 80px;
    animation: fadeInUp 0.8s ease-out;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .badge {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    background: rgba(74, 144, 226, 0.1);
    border: 1px solid rgba(74, 144, 226, 0.2);
    padding: 8px 20px;
    border-radius: 30px;
    margin-bottom: 40px;
    font-size: 14px;
    color: #4a90e2;
  }

  .badge::before {
    content: '';
    width: 8px;
    height: 8px;
    background: #4a90e2;
    border-radius: 50%;
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }

  h1 {
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 700;
    letter-spacing: -1px;
    margin-bottom: 20px;
    background: linear-gradient(135deg, #ffffff 0%, #8b92a1 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .subtitle {
    font-size: 1.25rem;
    color: #8b92a1;
    font-weight: 400;
  }

  .videos-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
    gap: 30px;
    margin-top: 60px;
    position: relative;
  }

  .video-card {
    position: relative;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.05);
    border-radius: 20px;
    overflow: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
    animation: cardFadeIn 0.6s ease-out backwards;
    text-decoration: none;
  }

  /* Floating animation unique pour chaque carte */
  .video-card:nth-child(1) { 
    animation: cardFadeIn 0.6s ease-out backwards, float1 15s ease-in-out infinite;
    animation-delay: 0.05s, 0s;
  }
  .video-card:nth-child(2) { 
    animation: cardFadeIn 0.6s ease-out backwards, float2 13s ease-in-out infinite;
    animation-delay: 0.1s, 1s;
  }
  .video-card:nth-child(3) { 
    animation: cardFadeIn 0.6s ease-out backwards, float3 17s ease-in-out infinite;
    animation-delay: 0.15s, 2s;
  }
  .video-card:nth-child(4) { 
    animation: cardFadeIn 0.6s ease-out backwards, float4 14s ease-in-out infinite;
    animation-delay: 0.2s, 0.5s;
  }
  .video-card:nth-child(5) { 
    animation: cardFadeIn 0.6s ease-out backwards, float5 16s ease-in-out infinite;
    animation-delay: 0.25s, 1.5s;
  }
  .video-card:nth-child(6) { 
    animation: cardFadeIn 0.6s ease-out backwards, float6 12s ease-in-out infinite;
    animation-delay: 0.3s, 3s;
  }
  .video-card:nth-child(7) { 
    animation: cardFadeIn 0.6s ease-out backwards, float1 18s ease-in-out infinite;
    animation-delay: 0.35s, 2.5s;
  }
  .video-card:nth-child(8) { 
    animation: cardFadeIn 0.6s ease-out backwards, float2 15s ease-in-out infinite;
    animation-delay: 0.4s, 1.2s;
  }
  .video-card:nth-child(9) { 
    animation: cardFadeIn 0.6s ease-out backwards, float3 13s ease-in-out infinite;
    animation-delay: 0.45s, 0.8s;
  }
  .video-card:nth-child(10) { 
    animation: cardFadeIn 0.6s ease-out backwards, float4 19s ease-in-out infinite;
    animation-delay: 0.5s, 2.2s;
  }
  .video-card:nth-child(11) { 
    animation: cardFadeIn 0.6s ease-out backwards, float5 14s ease-in-out infinite;
    animation-delay: 0.55s, 1.8s;
  }
  .video-card:nth-child(12) { 
    animation: cardFadeIn 0.6s ease-out backwards, float6 17s ease-in-out infinite;
    animation-delay: 0.6s, 0.3s;
  }

  /* Différents patterns de floating */
  @keyframes float1 {
    0%, 100% { transform: translateY(0px) translateX(0px) rotate(0deg); }
    25% { transform: translateY(-15px) translateX(8px) rotate(1.5deg); }
    50% { transform: translateY(8px) translateX(-6px) rotate(-1deg); }
    75% { transform: translateY(-10px) translateX(4px) rotate(0.8deg); }
  }

  @keyframes float2 {
    0%, 100% { transform: translateY(0px) translateX(0px) rotate(0deg); }
    33% { transform: translateY(12px) translateX(-10px) rotate(-1.2deg); }
    66% { transform: translateY(-14px) translateX(7px) rotate(1deg); }
  }

  @keyframes float3 {
    0%, 100% { transform: translateY(0px) translateX(0px) rotate(0deg); }
    20% { transform: translateY(-10px) translateX(-8px) rotate(0.8deg); }
    40% { transform: translateY(13px) translateX(9px) rotate(-1.5deg); }
    60% { transform: translateY(-16px) translateX(-5px) rotate(1.2deg); }
    80% { transform: translateY(8px) translateX(6px) rotate(-0.7deg); }
  }

  @keyframes float4 {
    0%, 100% { transform: translateY(0px) translateX(0px) rotate(0deg); }
    30% { transform: translateY(14px) translateX(7px) rotate(1.3deg); }
    60% { transform: translateY(-12px) translateX(-9px) rotate(-1.1deg); }
    90% { transform: translateY(6px) translateX(5px) rotate(0.6deg); }
  }

  @keyframes float5 {
    0%, 100% { transform: translateY(0px) translateX(0px) rotate(0deg); }
    25% { transform: translateY(-13px) translateX(-6px) rotate(-0.9deg); }
    50% { transform: translateY(10px) translateX(8px) rotate(1.4deg); }
    75% { transform: translateY(-8px) translateX(-7px) rotate(-1.3deg); }
  }

  @keyframes float6 {
    0%, 100% { transform: translateY(0px) translateX(0px) rotate(0deg); }
    35% { transform: translateY(11px) translateX(-8px) rotate(1.1deg); }
    70% { transform: translateY(-15px) translateX(10px) rotate(-0.8deg); }
  }

  @keyframes cardFadeIn {
    from {
      opacity: 0;
      transform: translateY(20px) scale(0.95);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }

  .video-card:hover {
    transform: translateY(-5px) scale(1.02) !important;
    background: rgba(255, 255, 255, 0.04);
    border-color: rgba(74, 144, 226, 0.3);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    animation-play-state: paused !important;
  }

  .video-thumbnail {
    position: relative;
    width: 100%;
    padding-bottom: 56.25%;
    background: linear-gradient(135deg, #1a1f2e 0%, #2a3441 100%);
    overflow: hidden;
  }

  .video-thumbnail img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.4s ease, opacity 0.4s ease;
    opacity: 0.85;
  }

  .video-card:hover .video-thumbnail img {
    transform: scale(1.05);
    opacity: 1;
  }

  .play-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 60px;
    height: 60px;
    background: rgba(74, 144, 226, 0.9);
    backdrop-filter: blur(10px);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    opacity: 0;
  }

  .video-card:hover .play-button {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1.1);
  }

  .play-icon {
    width: 0;
    height: 0;
    border-left: 18px solid white;
    border-top: 11px solid transparent;
    border-bottom: 11px solid transparent;
    margin-left: 4px;
  }

  .video-info {
    padding: 24px;
  }

  .video-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: #e4e6ea;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    transition: color 0.3s ease;
  }

  .video-card:hover .video-title {
    color: #4a90e2;
  }

  .loading {
    text-align: center;
    padding: 60px;
    font-size: 1.2rem;
    color: #8b92a1;
  }

  .loading::after {
    content: '';
    display: inline-block;
    width: 20px;
    height: 20px;
    margin-left: 10px;
    border: 2px solid #4a90e2;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .error {
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid rgba(239, 68, 68, 0.2);
    padding: 20px;
    border-radius: 12px;
    color: #ef4444;
    text-align: center;
    margin-top: 40px;
  }

  @media (max-width: 768px) {
    body {
      padding: 20px 15px;
    }
    
    .header {
      margin-bottom: 50px;
    }
    
    h1 {
      font-size: 2rem;
    }
    
    .videos-grid {
      grid-template-columns: 1fr;
      gap: 20px;
    }
    
    .video-info {
      padding: 18px;
    }
    
    /* Désactiver le floating sur mobile pour performance */
    .video-card {
      animation: cardFadeIn 0.6s ease-out backwards !important;
    }
  }
</style>

<script>
  // Configuration automatique
  window.addEventListener('DOMContentLoaded', () => {
    loadVideos();
  });

  async function loadVideos() {
    // Utilisation des variables d'environnement sécurisées
    const apiKey = import.meta.env.PUBLIC_YOUTUBE_API_KEY || 'AIzaSyB7dIaqRUHROl5KU2qRpK7Pgrjags5NhwE';
    const channelId = import.meta.env.PUBLIC_YOUTUBE_CHANNEL_ID || 'UCvlY7lI2l-kxr3SdvJuggpQ';
    const maxResults = 50; // On récupère plus de vidéos pour filtrer les shorts
    
    const container = document.getElementById('videosContainer');
    container.innerHTML = '<div class="loading">Chargement des ressources</div>';
    
    try {
      // Récupération des vidéos de la chaîne
      const searchUrl = `https://www.googleapis.com/youtube/v3/search?key=${apiKey}&channelId=${channelId}&part=snippet,id&order=date&maxResults=${maxResults}&type=video`;
      
      const searchResponse = await fetch(searchUrl);
      const searchData = await searchResponse.json();
      
      if (searchData.error) {
        throw new Error(searchData.error.message);
      }
      
      if (!searchData.items || searchData.items.length === 0) {
        container.innerHTML = '<div class="error">Aucune ressource disponible pour le moment</div>';
        return;
      }
      
      // Récupération des détails des vidéos pour obtenir la durée
      const videoIds = searchData.items.map(item => item.id.videoId).join(',');
      const detailsUrl = `https://www.googleapis.com/youtube/v3/videos?key=${apiKey}&id=${videoIds}&part=contentDetails,snippet`;
      
      const detailsResponse = await fetch(detailsUrl);
      const detailsData = await detailsResponse.json();
      
      // Filtrer les shorts (vidéos de moins de 3 minutes)
      const filteredVideos = detailsData.items.filter(video => {
        const duration = video.contentDetails.duration;
        // Convertir la durée ISO 8601 en secondes
        const match = duration.match(/PT(?:(\d+)M)?(?:(\d+)S)?/);
        if (match) {
          const minutes = parseInt(match[1] || 0);
          const seconds = parseInt(match[2] || 0);
          const totalSeconds = minutes * 60 + seconds;
          // Garder seulement les vidéos de 3 minutes ou plus (180 secondes)
          return totalSeconds >= 180;
        }
        return true; // Si on ne peut pas parser la durée, on garde la vidéo
      });
      
      // Limiter à 12 vidéos après filtrage
      const videosToDisplay = filteredVideos.slice(0, 12);
      
      if (videosToDisplay.length === 0) {
        container.innerHTML = '<div class="error">Aucune ressource disponible pour le moment</div>';
        return;
      }
      
      // Affichage des vidéos
      displayVideos(videosToDisplay);
      
    } catch (error) {
      container.innerHTML = `<div class="error">Erreur de chargement. Veuillez rafraîchir la page.</div>`;
      console.error('Erreur:', error);
    }
  }
  
  function displayVideos(videos) {
    const container = document.getElementById('videosContainer');
    
    const videosHTML = videos.map((video) => {
      const videoId = video.id;
      const title = video.snippet.title;
      const thumbnail = video.snippet.thumbnails.maxres?.url || video.snippet.thumbnails.high.url;
      
      return `
        <a href="https://www.youtube.com/watch?v=${videoId}" target="_blank" class="video-card">
          <div class="video-thumbnail">
            <img src="${thumbnail}" alt="${title}" loading="lazy">
            <div class="play-button">
              <div class="play-icon"></div>
            </div>
          </div>
          <div class="video-info">
            <h3 class="video-title">${title}</h3>
          </div>
        </a>
      `;
    }).join('');
    
    container.innerHTML = `<div class="videos-grid">${videosHTML}</div>`;
  }
  
  // Rechargement automatique toutes les heures
  setInterval(() => {
    loadVideos();
  }, 3600000); // 1 heure en millisecondes
</script>
